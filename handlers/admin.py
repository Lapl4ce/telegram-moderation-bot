"""
Admin handlers for the Telegram moderation bot.
Handles administrative commands like experience modification, rights management, etc.
"""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from middleware.auth import admin_required
from database.database import Database
from utils.experience import modify_user_experience, set_user_level, set_xp_multiplier
from utils.user_parser import parse_username
from config import MIN_XP_MULTIPLIER, MAX_XP_MULTIPLIER

router = Router()

@router.message(Command("xpmodify"))
@admin_required
async def xpmodify_command(message: Message, **kwargs):
    """Handle /xpmodify command to modify user experience."""
    args = message.text.split()[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/xpmodify [@username|user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/xpmodify @user +500</code> –∏–ª–∏ <code>/xpmodify 123456 -100</code>"
        )
        return
    
    # Parse target user
    target_arg = args[0]
    target_user_id = None
    
    if target_arg.startswith('@'):
        target_user_id = await get_user_id_by_username(target_arg[1:])
    elif target_arg.isdigit():
        target_user_id = int(target_arg)
    
    if not target_user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Parse XP amount
    try:
        xp_change = int(args[1])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.")
        return
    
    # Get user data before modification
    user_data = await Database.get_user(target_user_id)
    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    old_exp = user_data.get('experience', 0)
    old_level = user_data.get('level', 1)
    
    # Apply modification
    success = await modify_user_experience(target_user_id, xp_change)
    
    if not success:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞.")
        return
    
    # Get updated data
    updated_user_data = await Database.get_user(target_user_id)
    new_exp = updated_user_data.get('experience', 0)
    new_level = updated_user_data.get('level', 1)
    
    # Format response
    target_username = user_data.get('username')
    target_display = f"@{target_username}" if target_username else user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    change_text = f"+{xp_change}" if xp_change > 0 else str(xp_change)
    level_change = ""
    if new_level != old_level:
        level_change = f"\nüèÜ <b>–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω:</b> {old_level} ‚Üí {new_level}"
    
    success_text = f"""
‚úÖ <b>–û–ø—ã—Ç –∏–∑–º–µ–Ω–µ–Ω</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_display}
‚≠ê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {change_text} XP
üìä <b>–û–ø—ã—Ç:</b> {old_exp} ‚Üí {new_exp} XP{level_change}
üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}
    """
    
    await message.reply(success_text)

@router.message(Command("levelmodify"))
@admin_required
async def levelmodify_command(message: Message, **kwargs):
    """Handle /levelmodify command to set user level."""
    args = message.text.split()[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/levelmodify [@username|user_id] [—É—Ä–æ–≤–µ–Ω—å]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/levelmodify @user 25</code>"
        )
        return
    
    # Parse target user
    target_arg = args[0]
    target_user_id = None
    
    if target_arg.startswith('@'):
        target_user_id = await get_user_id_by_username(target_arg[1:])
    elif target_arg.isdigit():
        target_user_id = int(target_arg)
    
    if not target_user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Parse level
    try:
        target_level = int(args[1])
        if target_level < 1 or target_level > 100:
            await message.reply("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            return
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
        return
    
    # Get user data before modification
    user_data = await Database.get_user(target_user_id)
    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    old_level = user_data.get('level', 1)
    old_exp = user_data.get('experience', 0)
    
    # Set new level
    success = await set_user_level(target_user_id, target_level)
    
    if not success:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è.")
        return
    
    # Get updated data
    updated_user_data = await Database.get_user(target_user_id)
    new_exp = updated_user_data.get('experience', 0)
    
    # Format response
    target_username = user_data.get('username')
    target_display = f"@{target_username}" if target_username else user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    success_text = f"""
‚úÖ <b>–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_display}
üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {old_level} ‚Üí {target_level}
‚≠ê <b>–û–ø—ã—Ç:</b> {old_exp} ‚Üí {new_exp} XP
üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}
    """
    
    await message.reply(success_text)

@router.message(Command("multiplier"))
@admin_required
async def multiplier_command(message: Message, **kwargs):
    """Handle /multiplier command to set XP multiplier."""
    args = message.text.split()[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/multiplier [@username|user_id] [–º–Ω–æ–∂–∏—Ç–µ–ª—å]</code>\n"
            f"üîç –ü—Ä–∏–º–µ—Ä: <code>/multiplier @user 1.5</code>\n"
            f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {MIN_XP_MULTIPLIER} - {MAX_XP_MULTIPLIER}"
        )
        return
    
    # Parse target user
    target_arg = args[0]
    target_user_id = None
    
    if target_arg.startswith('@'):
        target_user_id = await get_user_id_by_username(target_arg[1:])
    elif target_arg.isdigit():
        target_user_id = int(target_arg)
    
    if not target_user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Parse multiplier
    try:
        multiplier = float(args[1])
        if not (MIN_XP_MULTIPLIER <= multiplier <= MAX_XP_MULTIPLIER):
            await message.reply(f"‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_XP_MULTIPLIER} –¥–æ {MAX_XP_MULTIPLIER}.")
            return
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å.")
        return
    
    # Get user data
    user_data = await Database.get_user(target_user_id)
    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    old_multiplier = user_data.get('xp_multiplier', 1.0)
    
    # Set new multiplier
    success = await set_xp_multiplier(target_user_id, multiplier)
    
    if not success:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è.")
        return
    
    # Format response
    target_username = user_data.get('username')
    target_display = f"@{target_username}" if target_username else user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    success_text = f"""
‚úÖ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_display}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {old_multiplier}x ‚Üí {multiplier}x
üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}
    """
    
    await message.reply(success_text)

@router.message(Command("give_rights"))
@admin_required
async def give_rights_command(message: Message, **kwargs):
    """Handle /give_rights command to grant user rights."""
    args = message.text.split()[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/give_rights [@username|user_id] [–ø—Ä–∞–≤–∞]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/give_rights @user moderator</code>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:</b>\n"
            "‚Ä¢ <code>admin</code> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>moderator</code> - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>art_leader</code> - –∞—Ä—Ç-–ª–∏–¥–µ—Ä"
        )
        return
    
    # Parse target user
    target_arg = args[0]
    target_user_id = None
    
    if target_arg.startswith('@'):
        target_user_id = await get_user_id_by_username(target_arg[1:])
    elif target_arg.isdigit():
        target_user_id = int(target_arg)
    
    if not target_user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Parse rights
    rights = args[1].lower()
    valid_rights = ['admin', 'moderator', 'art_leader']
    
    if rights not in valid_rights:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_rights)}")
        return
    
    # Get user data
    user_data = await Database.get_user(target_user_id)
    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # Update rights in database
    import aiosqlite
    from config import DATABASE_PATH
    
    field_name = f"is_{rights}"
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(f"""
            UPDATE users SET {field_name} = TRUE
            WHERE user_id = ?
        """, (target_user_id,))
        await db.commit()
    
    # Format response
    target_username = user_data.get('username')
    target_display = f"@{target_username}" if target_username else user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    rights_display = {
        'admin': 'üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'moderator': '‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'art_leader': 'üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä'
    }
    
    success_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_display}
üé≠ <b>–ü—Ä–∞–≤–∞:</b> {rights_display[rights]}
üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}
    """
    
    await message.reply(success_text)

@router.message(Command("remove_rights"))
@admin_required
async def remove_rights_command(message: Message, **kwargs):
    """Handle /remove_rights command to remove user rights."""
    args = message.text.split()[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remove_rights [@username|user_id] [–ø—Ä–∞–≤–∞]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/remove_rights @user moderator</code>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:</b>\n"
            "‚Ä¢ <code>admin</code> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>moderator</code> - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>art_leader</code> - –∞—Ä—Ç-–ª–∏–¥–µ—Ä"
        )
        return
    
    # Parse target user
    target_arg = args[0]
    target_user_id = None
    
    if target_arg.startswith('@'):
        target_user_id = await get_user_id_by_username(target_arg[1:])
    elif target_arg.isdigit():
        target_user_id = int(target_arg)
    
    if not target_user_id:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # Parse rights
    rights = args[1].lower()
    valid_rights = ['admin', 'moderator', 'art_leader']
    
    if rights not in valid_rights:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_rights)}")
        return
    
    # Get user data
    user_data = await Database.get_user(target_user_id)
    if not user_data:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # Update rights in database
    import aiosqlite
    from config import DATABASE_PATH
    
    field_name = f"is_{rights}"
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(f"""
            UPDATE users SET {field_name} = FALSE
            WHERE user_id = ?
        """, (target_user_id,))
        await db.commit()
    
    # Format response
    target_username = user_data.get('username')
    target_display = f"@{target_username}" if target_username else user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    
    rights_display = {
        'admin': 'üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'moderator': '‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        'art_leader': 'üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä'
    }
    
    success_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∞ —É–±—Ä–∞–Ω—ã</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_display}
üé≠ <b>–ü—Ä–∞–≤–∞:</b> {rights_display[rights]}
üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.mention_html()}
    """
    
    await message.reply(success_text)

# Utility function
async def get_user_id_by_username(username: str) -> int:
    """Get user ID by username."""
    import aiosqlite
    from config import DATABASE_PATH
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute("SELECT user_id FROM users WHERE username = ? COLLATE NOCASE", (username,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None