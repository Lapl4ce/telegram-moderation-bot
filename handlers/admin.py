"""Admin command handlers."""

import re
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, update, delete

from config import UserRoles
from database.database import get_db
from database.models import User, ExperienceMultiplier
from utils.permissions import check_admin_permissions, can_modify_experience, can_manage_roles
from utils.experience import calculate_level_from_experience, add_experience
from utils.user_parser import parse_username

router = Router()


async def get_target_user_admin(message: Message, args: list) -> Optional[tuple[int, str]]:
    """Get target user for admin commands."""
    if message.reply_to_message and message.reply_to_message.from_user:
        user = message.reply_to_message.from_user
        return user.id, user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not args:
        return None
    
    username = parse_username(args[0])
    
    async for session in get_db():
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        if user:
            return user.user_id, user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    return None


@router.message(Command("xpmodify"))
async def xp_modify_command(message: Message, user_role: str):
    """Handle /xpmodify command to modify user experience."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/xpmodify @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>/xpmodify @user 1000</code> - –¥–æ–±–∞–≤–∏—Ç—å 1000 XP\n"
            "<code>/xpmodify @user -500</code> - –æ—Ç–Ω—è—Ç—å 500 XP"
        )
        return
    
    target_info = await get_target_user_admin(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    try:
        xp_change = int(args[1] if not args[0].startswith('@') else args[2] if len(args) > 2 else args[1])
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.")
        return
    
    async for session in get_db():
        try:
            # Get current user data
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            old_experience = user.experience
            old_level = user.level
            new_experience = max(0, old_experience + xp_change)
            new_level = calculate_level_from_experience(new_experience)
            
            # Update user
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(experience=new_experience, level=new_level)
            )
            await session.commit()
            
            change_text = f"+{xp_change}" if xp_change > 0 else str(xp_change)
            level_text = ""
            if new_level != old_level:
                level_text = f"\nüìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {old_level} ‚Üí {new_level}"
            
            await message.reply(
                f"‚úÖ <b>–û–ø—ã—Ç –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è {target_name}</b>\n"
                f"üíé <b>–û–ø—ã—Ç:</b> {old_experience:,} ‚Üí {new_experience:,} ({change_text})"
                f"{level_text}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞: {e}")


@router.message(Command("levelmodify"))
async def level_modify_command(message: Message, user_role: str):
    """Handle /levelmodify command to modify user level."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/levelmodify @username —É—Ä–æ–≤–µ–Ω—å</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/levelmodify @user 25</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 25 —É—Ä–æ–≤–µ–Ω—å"
        )
        return
    
    target_info = await get_target_user_admin(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    try:
        new_level = int(args[1] if not args[0].startswith('@') else args[2] if len(args) > 2 else args[1])
        if new_level < 0:
            raise ValueError()
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
        return
    
    async for session in get_db():
        try:
            # Get current user data
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            old_level = user.level
            
            # Calculate experience for the new level
            from utils.experience import calculate_experience_for_level
            new_experience = calculate_experience_for_level(new_level)
            
            # Update user
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(level=new_level, experience=new_experience)
            )
            await session.commit()
            
            await message.reply(
                f"‚úÖ <b>–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è {target_name}</b>\n"
                f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {old_level} ‚Üí {new_level}\n"
                f"üíé <b>–ù–æ–≤—ã–π –æ–ø—ã—Ç:</b> {new_experience:,} XP"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {e}")


@router.message(Command("multiplier"))
async def multiplier_command(message: Message, user_role: str):
    """Handle /multiplier command to set experience multiplier."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/multiplier @username –º–Ω–æ–∂–∏—Ç–µ–ª—å [–≤—Ä–µ–º—è]</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<code>/multiplier @user 2.0</code> - –º–Ω–æ–∂–∏—Ç–µ–ª—å x2 –Ω–∞–≤—Å–µ–≥–¥–∞\n"
            "<code>/multiplier @user 1.5 7d</code> - –º–Ω–æ–∂–∏—Ç–µ–ª—å x1.5 –Ω–∞ 7 –¥–Ω–µ–π"
        )
        return
    
    target_info = await get_target_user_admin(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    try:
        multiplier_arg_index = 1 if not args[0].startswith('@') else 2
        multiplier = float(args[multiplier_arg_index])
        if multiplier <= 0:
            raise ValueError()
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å.")
        return
    
    # Parse duration if provided
    expires_at = None
    if len(args) > multiplier_arg_index + 1:
        duration_str = args[multiplier_arg_index + 1]
        from handlers.moderation import parse_duration
        duration_seconds = parse_duration(duration_str)
        if duration_seconds:
            expires_at = datetime.utcnow() + timedelta(seconds=duration_seconds)
    
    async for session in get_db():
        try:
            # Remove existing multiplier
            await session.execute(
                delete(ExperienceMultiplier).where(ExperienceMultiplier.user_id == target_user_id)
            )
            
            # Add new multiplier
            if multiplier != 1.0:
                new_multiplier = ExperienceMultiplier(
                    user_id=target_user_id,
                    multiplier=multiplier,
                    expires_at=expires_at
                )
                session.add(new_multiplier)
            
            await session.commit()
            
            multiplier_text = f"x{multiplier}"
            if expires_at:
                multiplier_text += f" –¥–æ {expires_at.strftime('%d.%m.%Y %H:%M')}"
            elif multiplier != 1.0:
                multiplier_text += " (–Ω–∞–≤—Å–µ–≥–¥–∞)"
            else:
                multiplier_text = "—É–±—Ä–∞–Ω"
            
            await message.reply(
                f"‚úÖ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –¥–ª—è {target_name}</b>\n"
                f"üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {multiplier_text}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è: {e}")


@router.message(Command("give_rights"))
async def give_rights_command(message: Message, user_role: str):
    """Handle /give_rights command to give user permissions."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–í—ã–¥–∞—á–∞ –ø—Ä–∞–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/give_rights @username —Ä–æ–ª—å</code>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            "‚Ä¢ <code>moderator</code> - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>admin</code> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ <code>art_leader</code> - –∞—Ä—Ç-–ª–∏–¥–µ—Ä\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/give_rights @user moderator</code>"
        )
        return
    
    target_info = await get_target_user_admin(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    role_arg_index = 1 if not args[0].startswith('@') else 2
    try:
        new_role = args[role_arg_index].lower()
    except IndexError:
        await message.reply("‚ùå –†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        return
    
    valid_roles = [UserRoles.MODERATOR, UserRoles.ADMIN, UserRoles.ART_LEADER]
    if new_role not in valid_roles:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_roles)}")
        return
    
    async for session in get_db():
        try:
            # Update user role
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(role=new_role)
            )
            await session.commit()
            
            role_names = {
                UserRoles.MODERATOR: "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                UserRoles.ADMIN: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                UserRoles.ART_LEADER: "üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä"
            }
            
            await message.reply(
                f"‚úÖ <b>–ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}</b>\n"
                f"üé≠ <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {role_names.get(new_role, new_role)}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤: {e}")


@router.message(Command("remove_rights"))
async def remove_rights_command(message: Message, user_role: str):
    """Handle /remove_rights command to remove user permissions."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 1:
        await message.reply(
            "üìù <b>–°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/remove_rights @username</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/remove_rights @user</code>"
        )
        return
    
    target_info = await get_target_user_admin(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    async for session in get_db():
        try:
            # Get current role
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            old_role = user.role
            
            # Update user role to member
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(role=UserRoles.MEMBER)
            )
            await session.commit()
            
            role_names = {
                UserRoles.MODERATOR: "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                UserRoles.ADMIN: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                UserRoles.ART_LEADER: "üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä",
                UserRoles.MEMBER: "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
            }
            
            await message.reply(
                f"‚úÖ <b>–ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name}</b>\n"
                f"üé≠ <b>–†–æ–ª—å:</b> {role_names.get(old_role, old_role)} ‚Üí {role_names[UserRoles.MEMBER]}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤: {e}")


@router.message(Command("admin_stats"))
async def admin_stats_command(message: Message, user_role: str):
    """Handle /admin_stats command to show bot statistics."""
    if not await check_admin_permissions(message, user_role):
        return
    
    async for session in get_db():
        try:
            # Get user statistics
            from sqlalchemy import func
            
            # Total users
            result = await session.execute(select(func.count(User.user_id)))
            total_users = result.scalar()
            
            # Users by role
            result = await session.execute(
                select(User.role, func.count(User.user_id))
                .group_by(User.role)
            )
            roles_stats = dict(result.fetchall())
            
            # Active users (with messages in last 30 days)
            thirty_days_ago = datetime.utcnow() - timedelta(days=30)
            result = await session.execute(
                select(func.count(User.user_id))
                .where(User.last_message_time > thirty_days_ago)
            )
            active_users = result.scalar()
            
            # Top level users
            result = await session.execute(
                select(User.username, User.level, User.experience)
                .order_by(User.level.desc(), User.experience.desc())
                .limit(5)
            )
            top_users = result.fetchall()
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
                f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ (30 –¥–Ω–µ–π):</b> {active_users}\n\n"
                f"üé≠ <b>–ü–æ —Ä–æ–ª—è–º:</b>\n"
            )
            
            role_names = {
                UserRoles.MEMBER: "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏",
                UserRoles.MODERATOR: "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                UserRoles.ADMIN: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                UserRoles.ART_LEADER: "üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä—ã"
            }
            
            for role, count in roles_stats.items():
                role_name = role_names.get(role, role)
                stats_text += f"‚Ä¢ {role_name}: {count}\n"
            
            stats_text += "\nüèÜ <b>–¢–æ–ø –ø–æ —É—Ä–æ–≤–Ω—é:</b>\n"
            for i, (username, level, experience) in enumerate(top_users, 1):
                username_display = username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                stats_text += f"{i}. @{username_display} - {level} —É—Ä. ({experience:,} XP)\n"
            
            await message.reply(stats_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")