from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import logging

from database.models import User, UserRight
from database.database import Database
from middleware.auth import require_admin
from utils.validators import extract_user_id, sanitize_text, format_user_display_name
from utils.experience import calculate_level_from_exp

logger = logging.getLogger(__name__)
router = Router()

async def get_target_user_admin(message: Message, db: Database, args: list) -> User:
    """Get target user for admin commands"""
    target_user = None
    
    # Check if replying to a message
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
        target_user = await db.get_or_create_user(
            user_id=target_user_id,
            username=message.reply_to_message.from_user.username,
            first_name=message.reply_to_message.from_user.first_name,
            last_name=message.reply_to_message.from_user.last_name
        )
    elif args:
        # Try to extract user ID from first argument
        user_id = extract_user_id(args[0])
        if user_id:
            target_user = await db.get_or_create_user(user_id=user_id)
    
    return target_user

@router.message(Command("xpmodify"))
@require_admin
async def cmd_xp_modify(message: Message, user: User, db: Database):
    """Handle /xpmodify command - modify user experience"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.reply("""
‚ö° **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—ã—Ç–∞**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/xpmodify –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`

–ü—Ä–∏–º–µ—Ä:
`/xpmodify @username +500` - –¥–æ–±–∞–≤–∏—Ç—å 500 XP
`/xpmodify 123456789 -200` - —É–±—Ä–∞—Ç—å 200 XP
`/xpmodify @username =1000` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1000 XP
""", parse_mode="Markdown")
        return
    
    # Get target user
    target_user = await get_target_user_admin(message, db, args)
    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Parse XP amount
    xp_str = args[1] if len(args) > 1 else args[0]
    
    try:
        old_experience = target_user.experience
        old_level = target_user.level
        
        if xp_str.startswith('+'):
            # Add XP
            amount = int(xp_str[1:])
            target_user.experience += amount
        elif xp_str.startswith('-'):
            # Subtract XP
            amount = int(xp_str[1:])
            target_user.experience = max(0, target_user.experience - amount)
        elif xp_str.startswith('='):
            # Set XP
            amount = int(xp_str[1:])
            target_user.experience = max(0, amount)
        else:
            # Default to setting XP
            amount = int(xp_str)
            target_user.experience = max(0, amount)
        
        # Recalculate level
        target_user.level = calculate_level_from_exp(target_user.experience)
        
        # Update in database
        await db.update_user(target_user)
        
        target_name = format_user_display_name(target_user.username, target_user.first_name, target_user.last_name, target_user.user_id)
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        
        result_text = f"""
‚ö° **–û–ø—ã—Ç –∏–∑–º–µ–Ω—ë–Ω**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_name}
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
‚Ä¢ –û–ø—ã—Ç: {old_experience:,} ‚Üí {target_user.experience:,}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {target_user.level}
"""
        
        await message.reply(result_text, parse_mode="Markdown")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—ã—Ç–∞")
    except Exception as e:
        logger.error(f"Error modifying XP: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞")

@router.message(Command("levelmodify"))
@require_admin
async def cmd_level_modify(message: Message, user: User, db: Database):
    """Handle /levelmodify command - modify user level"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.reply("""
üèÜ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/levelmodify –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–≤–µ–Ω—å`

–ü—Ä–∏–º–µ—Ä:
`/levelmodify @username 25` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 25 —É—Ä–æ–≤–µ–Ω—å
""", parse_mode="Markdown")
        return
    
    # Get target user
    target_user = await get_target_user_admin(message, db, args)
    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Parse level
    level_str = args[1] if len(args) > 1 else args[0]
    
    try:
        new_level = int(level_str)
        if new_level < 1:
            await message.reply("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        old_level = target_user.level
        old_experience = target_user.experience
        
        # Calculate required experience for the new level
        from utils.experience import calculate_exp_for_level
        required_exp = calculate_exp_for_level(new_level)
        
        # Set new level and experience
        target_user.level = new_level
        target_user.experience = required_exp
        
        # Update in database
        await db.update_user(target_user)
        
        target_name = format_user_display_name(target_user.username, target_user.first_name, target_user.last_name, target_user.user_id)
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        
        result_text = f"""
üèÜ **–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_name}
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {target_user.level}
‚Ä¢ –û–ø—ã—Ç: {old_experience:,} ‚Üí {target_user.experience:,}
"""
        
        await message.reply(result_text, parse_mode="Markdown")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è")
    except Exception as e:
        logger.error(f"Error modifying level: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è")

@router.message(Command("give_rights"))
@require_admin
async def cmd_give_rights(message: Message, user: User, db: Database):
    """Handle /give_rights command - give user rights"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.reply("""
üëë **–í—ã–¥–∞—á–∞ –ø—Ä–∞–≤**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/give_rights –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞`

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞:
‚Ä¢ `moderator` - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
‚Ä¢ `admin` - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä  
‚Ä¢ `art_leader` - –∞—Ä—Ç-–ª–∏–¥–µ—Ä

–ü—Ä–∏–º–µ—Ä:
`/give_rights @username moderator`
""", parse_mode="Markdown")
        return
    
    # Get target user
    target_user = await get_target_user_admin(message, db, args)
    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Parse rights
    rights_str = args[1] if len(args) > 1 else args[0]
    rights_str = rights_str.lower()
    
    rights_map = {
        "moderator": UserRight.MODERATOR,
        "admin": UserRight.ADMIN,
        "art_leader": UserRight.ART_LEADER,
        "user": UserRight.USER
    }
    
    if rights_str not in rights_map:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–∞–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ: moderator, admin, art_leader")
        return
    
    old_rights = target_user.rights
    target_user.rights = rights_map[rights_str]
    
    # Update in database
    await db.update_user(target_user)
    
    target_name = format_user_display_name(target_user.username, target_user.first_name, target_user.last_name, target_user.user_id)
    admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
    
    rights_names = {
        UserRight.USER: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        UserRight.MODERATOR: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
        UserRight.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        UserRight.ART_LEADER: "–ê—Ä—Ç-–ª–∏–¥–µ—Ä"
    }
    
    result_text = f"""
üëë **–ü—Ä–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_name}
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
‚Ä¢ –ü—Ä–∞–≤–∞: {rights_names[old_rights]} ‚Üí {rights_names[target_user.rights]}
"""
    
    await message.reply(result_text, parse_mode="Markdown")

@router.message(Command("remove_rights"))
@require_admin
async def cmd_remove_rights(message: Message, user: User, db: Database):
    """Handle /remove_rights command - remove user rights"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    # Get target user
    target_user = await get_target_user_admin(message, db, args)
    if not target_user:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤")
        return
    
    old_rights = target_user.rights
    target_user.rights = UserRight.USER
    
    # Update in database
    await db.update_user(target_user)
    
    target_name = format_user_display_name(target_user.username, target_user.first_name, target_user.last_name, target_user.user_id)
    admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
    
    result_text = f"""
üëë **–ü—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_name}
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
    
    await message.reply(result_text, parse_mode="Markdown")

@router.message(Command("multiplier"))
@require_admin
async def cmd_multiplier(message: Message, user: User, db: Database):
    """Handle /multiplier command - set XP multiplier"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.reply("""
‚ö° **–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/multiplier –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–Ω–æ–∂–∏—Ç–µ–ª—å`

–ü—Ä–∏–º–µ—Ä:
`/multiplier @username 2.0` - –¥–≤–æ–π–Ω–æ–π –æ–ø—ã—Ç
`/multiplier 123456789 0.5` - –ø–æ–ª–æ–≤–∏–Ω–Ω—ã–π –æ–ø—ã—Ç
`/multiplier @username 1.0` - –æ–±—ã—á–Ω—ã–π –æ–ø—ã—Ç
""", parse_mode="Markdown")
        return
    
    # Get target user
    target_user = await get_target_user_admin(message, db, args)
    if not target_user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # Parse multiplier
    multiplier_str = args[1] if len(args) > 1 else args[0]
    
    try:
        multiplier = float(multiplier_str)
        if multiplier < 0:
            await message.reply("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if multiplier > 10:
            await message.reply("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 10")
            return
        
        old_multiplier = target_user.xp_multiplier
        target_user.xp_multiplier = multiplier
        
        # Update in database
        await db.update_user(target_user)
        
        target_name = format_user_display_name(target_user.username, target_user.first_name, target_user.last_name, target_user.user_id)
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        
        result_text = f"""
‚ö° **–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_name}
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

üìä **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**
‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {old_multiplier}x ‚Üí {multiplier}x
"""
        
        await message.reply(result_text, parse_mode="Markdown")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error setting multiplier: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è")