"""
Bad words management handlers for the Telegram moderation bot.
Handles adding, removing, and listing forbidden words.
"""
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from middleware.auth import admin_required
from database.database import Database
from config import ITEMS_PER_PAGE

router = Router()

@router.message(Command("add_badword"))
@admin_required
async def add_badword_command(message: Message, **kwargs):
    """Handle /add_badword command to add a forbidden word."""
    args = message.text.split()[1:] if message.text else []
    
    if not args:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add_badword [—Å–ª–æ–≤–æ]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/add_badword —Å–ø–∞–º</code>"
        )
        return
    
    word = " ".join(args).strip().lower()
    
    if len(word) < 2:
        await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    # Add word to database
    added = await Database.add_badword(word, message.from_user.id)
    
    if added:
        success_text = f"""
‚úÖ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>

üö´ <b>–°–ª–æ–≤–æ:</b> <code>{word}</code>
üëÆ <b>–î–æ–±–∞–≤–∏–ª:</b> {message.from_user.mention_html()}

üí° –°–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è.
        """
        await message.reply(success_text)
    else:
        await message.reply(f"‚ùå –°–ª–æ–≤–æ '<code>{word}</code>' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.")

@router.message(Command("remove_badword"))
@admin_required
async def remove_badword_command(message: Message, **kwargs):
    """Handle /remove_badword command to remove a forbidden word."""
    args = message.text.split()[1:] if message.text else []
    
    if not args:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remove_badword [—Å–ª–æ–≤–æ]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/remove_badword —Å–ø–∞–º</code>"
        )
        return
    
    word = " ".join(args).strip().lower()
    
    # Remove word from database
    removed = await Database.remove_badword(word)
    
    if removed:
        success_text = f"""
‚úÖ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ</b>

üö´ <b>–°–ª–æ–≤–æ:</b> <code>{word}</code>
üëÆ <b>–£–¥–∞–ª–∏–ª:</b> {message.from_user.mention_html()}
        """
        await message.reply(success_text)
    else:
        await message.reply(f"‚ùå –°–ª–æ–≤–æ '<code>{word}</code>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.")

@router.message(Command("badwords_list"))
@admin_required
async def badwords_list_command(message: Message, **kwargs):
    """Handle /badwords_list command to show forbidden words."""
    await send_badwords_list(message, 1)

async def send_badwords_list(message: Message, page: int = 1):
    """Send paginated list of bad words."""
    badwords = await Database.get_badwords()
    
    if not badwords:
        await message.reply("üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
        return
    
    # Paginate words
    total_pages = (len(badwords) - 1) // ITEMS_PER_PAGE + 1
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_words = badwords[start_idx:end_idx]
    
    # Build list text
    list_text = f"üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
    
    for i, word in enumerate(page_words, start=start_idx + 1):
        list_text += f"{i}. <code>{word}</code>\n"
    
    list_text += f"\nüìä <b>–í—Å–µ–≥–æ —Å–ª–æ–≤:</b> {len(badwords)}"
    
    # Create pagination keyboard
    keyboard = create_badwords_pagination_keyboard(page, total_pages)
    
    await message.reply(list_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("badwords_page:"))
async def badwords_page_callback(callback: CallbackQuery, **kwargs):
    """Handle bad words page navigation callbacks."""
    if not kwargs.get('is_admin', False):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    page = int(callback.data.split(":")[1])
    
    badwords = await Database.get_badwords()
    
    if not badwords:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    
    # Paginate words
    total_pages = (len(badwords) - 1) // ITEMS_PER_PAGE + 1
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_words = badwords[start_idx:end_idx]
    
    # Build list text
    list_text = f"üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
    
    for i, word in enumerate(page_words, start=start_idx + 1):
        list_text += f"{i}. <code>{word}</code>\n"
    
    list_text += f"\nüìä <b>–í—Å–µ–≥–æ —Å–ª–æ–≤:</b> {len(badwords)}"
    
    # Create pagination keyboard
    keyboard = create_badwords_pagination_keyboard(page, total_pages)
    
    try:
        await callback.message.edit_text(list_text, reply_markup=keyboard)
        await callback.answer()
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

def create_badwords_pagination_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    """Create pagination keyboard for bad words list."""
    buttons = []
    
    # Previous page button
    if current_page > 1:
        buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"badwords_page:{current_page - 1}"
        ))
    
    # Current page indicator
    buttons.append(InlineKeyboardButton(
        text=f"üìÑ {current_page}/{total_pages}",
        callback_data="noop"
    ))
    
    # Next page button
    if current_page < total_pages:
        buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
            callback_data=f"badwords_page:{current_page + 1}"
        ))
    
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    """Handle no-operation callbacks."""
    await callback.answer()