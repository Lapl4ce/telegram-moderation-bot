from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import logging

from database.models import User
from database.database import Database
from middleware.auth import require_admin
from utils.validators import sanitize_text, format_user_display_name

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("add_badword"))
@require_admin
async def cmd_add_badword(message: Message, user: User, db: Database):
    """Handle /add_badword command - add bad word to filter"""
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.reply("""
üö´ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_badword —Å–ª–æ–≤–æ_–∏–ª–∏_—Ñ—Ä–∞–∑–∞`

–ü—Ä–∏–º–µ—Ä:
`/add_badword —Å–ø–∞–º`
`/add_badword –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ`

–°–ª–æ–≤–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π.
""", parse_mode="Markdown")
        return
    
    word = sanitize_text(args[1]).lower().strip()
    
    if len(word) < 2:
        await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return
    
    if len(word) > 100:
        await message.reply("‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    # Add to database
    success = await db.add_bad_word(word, user.user_id)
    
    if success:
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        
        result_text = f"""
‚úÖ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ**

üö´ **–°–ª–æ–≤–æ:** `{word}`
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

–°–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è.
"""
        await message.reply(result_text, parse_mode="Markdown")
        
        logger.info(f"Admin {user.user_id} added bad word: {word}")
    else:
        await message.reply("‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö")

@router.message(Command("remove_badword"))
@require_admin
async def cmd_remove_badword(message: Message, user: User, db: Database):
    """Handle /remove_badword command - remove bad word from filter"""
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.reply("""
‚úÖ **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_badword —Å–ª–æ–≤–æ_–∏–ª–∏_—Ñ—Ä–∞–∑–∞`

–ü—Ä–∏–º–µ—Ä:
`/remove_badword —Å–ø–∞–º`
`/remove_badword –ø–ª–æ—Ö–æ–µ —Å–ª–æ–≤–æ`

–°–ª–æ–≤–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞.
""", parse_mode="Markdown")
        return
    
    word = sanitize_text(args[1]).lower().strip()
    
    # Remove from database
    success = await db.remove_bad_word(word)
    
    if success:
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        
        result_text = f"""
‚úÖ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ**

üÜì **–°–ª–æ–≤–æ:** `{word}`
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

–≠—Ç–æ —Å–ª–æ–≤–æ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è.
"""
        await message.reply(result_text, parse_mode="Markdown")
        
        logger.info(f"Admin {user.user_id} removed bad word: {word}")
    else:
        await message.reply("‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö")

@router.message(Command("list_badwords"))
@require_admin
async def cmd_list_badwords(message: Message, user: User, db: Database):
    """Handle /list_badwords command - list all bad words"""
    
    bad_words = await db.get_bad_words()
    
    if not bad_words:
        await message.reply("üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    # Group words for better display
    words_text = ""
    for i, word in enumerate(bad_words, 1):
        words_text += f"{i}. `{word}`\n"
        
        # Split into multiple messages if too long
        if len(words_text) > 3000:
            await message.reply(f"üö´ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—á–∞—Å—Ç—å {i//50 + 1}):**\n\n{words_text}", parse_mode="Markdown")
            words_text = ""
    
    if words_text:
        header = f"üö´ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ({len(bad_words)} –≤—Å–µ–≥–æ):**\n\n"
        await message.reply(header + words_text, parse_mode="Markdown")

@router.message(Command("clear_badwords"))
@require_admin
async def cmd_clear_badwords(message: Message, user: User, db: Database):
    """Handle /clear_badwords command - clear all bad words (dangerous!)"""
    
    # This is a dangerous operation, so we require confirmation
    await message.reply("""
‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**

–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
`/confirm_clear_badwords`

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π—Ç–µ.
""", parse_mode="Markdown")

@router.message(Command("confirm_clear_badwords"))
@require_admin
async def cmd_confirm_clear_badwords(message: Message, user: User, db: Database):
    """Handle /confirm_clear_badwords command - confirm clearing all bad words"""
    
    # Get count of words before clearing
    bad_words = await db.get_bad_words()
    words_count = len(bad_words)
    
    # Clear all bad words by removing each one
    # Note: This is inefficient but works with current database structure
    # In production, you'd want a proper "clear all" method
    for word in bad_words:
        await db.remove_bad_word(word)
    
    admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
    
    result_text = f"""
üóëÔ∏è **–í—Å–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã**

üìä **–£–¥–∞–ª–µ–Ω–æ:** {words_count} —Å–ª–æ–≤
üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {admin_name}

–§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ—Ç–∫–ª—é—á—ë–Ω –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.
"""
    
    await message.reply(result_text, parse_mode="Markdown")
    logger.warning(f"Admin {user.user_id} cleared all bad words ({words_count} words)")

@router.message(Command("badwords_stats"))
@require_admin
async def cmd_badwords_stats(message: Message, user: User, db: Database):
    """Handle /badwords_stats command - show bad words statistics"""
    
    bad_words = await db.get_bad_words()
    words_count = len(bad_words)
    
    if words_count == 0:
        stats_text = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–æ–≤**

üö´ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤:** 0
‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** –§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á—ë–Ω

–î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π `/add_badword`
"""
    else:
        # Calculate some basic stats
        avg_length = sum(len(word) for word in bad_words) / words_count
        longest_word = max(bad_words, key=len) if bad_words else ""
        shortest_word = min(bad_words, key=len) if bad_words else ""
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ª–æ–≤**

üö´ **–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤:** {words_count}
‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω

üìè **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:** {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤
üî§ **–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ:** `{longest_word}` ({len(longest_word)} —Å–∏–º–≤–æ–ª–æ–≤)
üî° **–°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ:** `{shortest_word}` ({len(shortest_word)} —Å–∏–º–≤–æ–ª–æ–≤)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list_badwords` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–≤.
"""
    
    await message.reply(stats_text, parse_mode="Markdown")