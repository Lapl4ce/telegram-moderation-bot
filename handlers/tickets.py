"""Ticket system handlers."""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, update

from config import TICKET_GROUP_ID
from database.database import get_db
from database.models import Ticket, TicketResponse
from utils.permissions import can_access_tickets

router = Router()


@router.message(Command("ticket"))
async def ticket_command(message: Message):
    """Handle /ticket command - only works in private messages."""
    if message.chat.type != "private":
        await message.reply(
            "üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–° –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ticket —Ç–∞–º."
        )
        return
    
    # Get message after /ticket command
    ticket_text = message.text[7:].strip()  # Remove "/ticket" from the beginning
    
    if not ticket_text:
        await message.reply(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/ticket –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/ticket –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–Ω–∞–ª—É</code>"
        )
        return
    
    # Create ticket in database
    async for session in get_db():
        try:
            ticket = Ticket(
                user_id=message.from_user.id,
                username=message.from_user.username,
                message=ticket_text,
                status="open"
            )
            session.add(ticket)
            await session.commit()
            await session.refresh(ticket)
            
            # Send ticket to admin group if configured
            if TICKET_GROUP_ID:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                            callback_data=f"ticket_take_{ticket.id}"
                        ),
                        InlineKeyboardButton(
                            text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
                            callback_data=f"ticket_close_{ticket.id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                            callback_data=f"ticket_reply_{ticket.id}"
                        )
                    ]
                ])
                
                ticket_text_admin = (
                    f"üé´ <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
                    f"üë§ <b>–û—Ç:</b> {message.from_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                )
                
                if message.from_user.username:
                    ticket_text_admin += f" (@{message.from_user.username})"
                
                ticket_text_admin += f"\nüÜî <b>ID:</b> <code>{message.from_user.id}</code>\n\n"
                ticket_text_admin += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{ticket_text}"
                
                # Send to admin group
                try:
                    from aiogram import Bot
                    from config import BOT_TOKEN
                    bot = Bot(token=BOT_TOKEN)
                    sent_message = await bot.send_message(
                        chat_id=TICKET_GROUP_ID,
                        text=ticket_text_admin,
                        reply_markup=keyboard
                    )
                    
                    # Save message ID for future reference
                    await session.execute(
                        update(Ticket)
                        .where(Ticket.id == ticket.id)
                        .values(telegram_message_id=sent_message.message_id)
                    )
                    await session.commit()
                    
                except Exception as e:
                    print(f"Error sending ticket to admin group: {e}")
            
            await message.reply(
                f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìù <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{ticket_text}\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")


@router.callback_query(lambda c: c.data.startswith("ticket_"))
async def ticket_callback_handler(callback: CallbackQuery, user_role: str):
    """Handle ticket callback buttons."""
    if not can_access_tickets(user_role):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏.", show_alert=True)
        return
    
    action_data = callback.data.split("_")
    action = action_data[1]
    ticket_id = int(action_data[2])
    
    async for session in get_db():
        try:
            # Get ticket
            result = await session.execute(
                select(Ticket).where(Ticket.id == ticket_id)
            )
            ticket = result.scalar_one_or_none()
            
            if not ticket:
                await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            
            if action == "take":
                if ticket.status != "open":
                    await callback.answer("‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.", show_alert=True)
                    return
                
                # Take ticket
                await session.execute(
                    update(Ticket)
                    .where(Ticket.id == ticket_id)
                    .values(status="in_progress", assigned_to=callback.from_user.id)
                )
                await session.commit()
                
                # Update message
                new_text = callback.message.text + f"\n\nüîÑ <b>–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:</b> {callback.from_user.first_name}"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
                            callback_data=f"ticket_close_{ticket.id}"
                        ),
                        InlineKeyboardButton(
                            text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                            callback_data=f"ticket_reply_{ticket.id}"
                        )
                    ]
                ])
                
                await callback.message.edit_text(new_text, reply_markup=keyboard)
                await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!")
                
            elif action == "close":
                # Close ticket
                await session.execute(
                    update(Ticket)
                    .where(Ticket.id == ticket_id)
                    .values(status="closed")
                )
                await session.commit()
                
                # Update message
                new_text = callback.message.text + f"\n\n‚úÖ <b>–ó–∞–∫—Ä—ã—Ç:</b> {callback.from_user.first_name}"
                
                await callback.message.edit_text(new_text, reply_markup=None)
                await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!")
                
                # Notify user
                try:
                    from aiogram import Bot
                    from config import BOT_TOKEN
                    bot = Bot(token=BOT_TOKEN)
                    await bot.send_message(
                        chat_id=ticket.user_id,
                        text=f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id} –∑–∞–∫—Ä—ã—Ç</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                    )
                except Exception as e:
                    print(f"Error notifying user about ticket closure: {e}")
                
            elif action == "reply":
                await callback.answer(
                    f"üí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    f"/reply {ticket.id} –í–∞—à –æ—Ç–≤–µ—Ç",
                    show_alert=True
                )
                
        except Exception as e:
            await session.rollback()
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.message(Command("reply"))
async def reply_command(message: Message, user_role: str):
    """Handle /reply command for responding to tickets."""
    if not can_access_tickets(user_role):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã.")
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply(
            "üìù <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/reply –Ω–æ–º–µ—Ä_—Ç–∏–∫–µ—Ç–∞ –≤–∞—à_–æ—Ç–≤–µ—Ç</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/reply 123 –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞</code>"
        )
        return
    
    try:
        ticket_id = int(args[1])
        reply_text = args[2]
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞.")
        return
    
    async for session in get_db():
        try:
            # Get ticket
            result = await session.execute(
                select(Ticket).where(Ticket.id == ticket_id)
            )
            ticket = result.scalar_one_or_none()
            
            if not ticket:
                await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            if ticket.status == "closed":
                await message.reply("‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
                return
            
            # Create response
            response = TicketResponse(
                ticket_id=ticket_id,
                responder_user_id=message.from_user.id,
                message=reply_text
            )
            session.add(response)
            await session.commit()
            
            # Send response to user
            try:
                from aiogram import Bot
                from config import BOT_TOKEN
                bot = Bot(token=BOT_TOKEN)
                await bot.send_message(
                    chat_id=ticket.user_id,
                    text=(
                        f"üí¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
                        f"üë§ <b>–û—Ç:</b> {message.from_user.first_name}\n\n"
                        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{reply_text}"
                    )
                )
                
                await message.reply(
                    f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                    f"üé´ <b>–¢–∏–∫–µ—Ç:</b> #{ticket.id}"
                )
                
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


@router.message(Command("tickets"))
async def tickets_list_command(message: Message, user_role: str):
    """Handle /tickets command to list open tickets."""
    if not can_access_tickets(user_role):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    
    async for session in get_db():
        try:
            # Get open tickets
            result = await session.execute(
                select(Ticket)
                .where(Ticket.status.in_(["open", "in_progress"]))
                .order_by(Ticket.created_at.desc())
                .limit(10)
            )
            tickets = result.scalars().all()
            
            if not tickets:
                await message.reply("üìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
                return
            
            tickets_text = "üìã <b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n\n"
            
            for ticket in tickets:
                status_emoji = "üü°" if ticket.status == "open" else "üîÑ"
                tickets_text += (
                    f"{status_emoji} <b>#{ticket.id}</b> - {ticket.status}\n"
                    f"üë§ {ticket.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {ticket.user_id})\n"
                    f"üìÖ {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìù {ticket.message[:50]}{'...' if len(ticket.message) > 50 else ''}\n\n"
                )
            
            await message.reply(tickets_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: {e}")