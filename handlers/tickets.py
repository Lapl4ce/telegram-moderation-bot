"""
Ticket system handlers for the Telegram moderation bot.
Handles ticket creation, management, and responses.
"""
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from middleware.auth import moderator_required
from database.database import Database
from config import MODERATOR_GROUP_ID

router = Router()

class TicketStates(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()

@router.message(Command("ticket"))
async def ticket_command(message: Message, state: FSMContext, **kwargs):
    """Handle /ticket command to start ticket creation process."""
    # Only work in private messages
    if message.chat.type != 'private':
        await message.reply("üé´ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: /ticket")
        return
    
    await message.reply(
        "üé´ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Ç–µ–º—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:"
    )
    await state.set_state(TicketStates.waiting_for_subject)

@router.message(TicketStates.waiting_for_subject)
async def process_ticket_subject(message: Message, state: FSMContext, **kwargs):
    """Process ticket subject input."""
    if not message.text or len(message.text.strip()) < 3:
        await message.reply("‚ùå –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(subject=message.text.strip())
    await message.reply(
        "üìã <b>–¢–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
    )
    await state.set_state(TicketStates.waiting_for_message)

@router.message(TicketStates.waiting_for_message)
async def process_ticket_message(message: Message, state: FSMContext, **kwargs):
    """Process ticket message and create the ticket."""
    if not message.text or len(message.text.strip()) < 10:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Get ticket data
    data = await state.get_data()
    subject = data.get('subject')
    ticket_message = message.text.strip()
    user_id = message.from_user.id
    
    # Create ticket in database
    ticket_id = await Database.create_ticket(user_id, subject, ticket_message)
    
    # Clear state
    await state.clear()
    
    # Send confirmation to user
    await message.reply(
        f"‚úÖ <b>–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üé´ <b>–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞:</b> #{ticket_id}\n"
        f"üìã <b>–¢–µ–º–∞:</b> {subject}\n\n"
        f"‚è∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. "
        f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )
    
    # Send ticket to moderator group
    if MODERATOR_GROUP_ID:
        await send_ticket_to_moderators(message.bot, ticket_id, user_id, subject, ticket_message)

async def send_ticket_to_moderators(bot, ticket_id: int, user_id: int, subject: str, ticket_message: str):
    """Send new ticket notification to moderator group."""
    # Get user info
    user_data = await Database.get_user(user_id)
    username = user_data.get('username') if user_data else None
    first_name = user_data.get('first_name') if user_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
    
    user_display = f"@{username}" if username else first_name
    
    moderator_text = f"""
üé´ <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}</b>

üë§ <b>–û—Ç:</b> {user_display} (<code>{user_id}</code>)
üìã <b>–¢–µ–º–∞:</b> {subject}

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{ticket_message}
    """
    
    # Create inline keyboard for moderator actions
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                callback_data=f"ticket_assign:{ticket_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=f"ticket_close:{ticket_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"ticket_reply:{ticket_id}"
            )
        ]
    ])
    
    try:
        await bot.send_message(
            chat_id=MODERATOR_GROUP_ID,
            text=moderator_text,
            reply_markup=keyboard
        )
    except Exception as e:
        # Log error but don't fail ticket creation
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Failed to send ticket to moderator group: {e}")

@router.callback_query(F.data.startswith("ticket_assign:"))
async def ticket_assign_callback(callback: CallbackQuery, **kwargs):
    """Handle ticket assignment callback."""
    if not kwargs.get('is_moderator', False):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    ticket_id = int(callback.data.split(":")[1])
    moderator_id = callback.from_user.id
    
    # Update ticket assignment in database
    import aiosqlite
    from config import DATABASE_PATH
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute("""
            UPDATE tickets SET assigned_moderator = ?
            WHERE id = ? AND status = 'open'
        """, (moderator_id, ticket_id))
        await db.commit()
    
    # Update message to show assignment
    current_text = callback.message.text or callback.message.caption
    updated_text = f"{current_text}\n\nüëÆ <b>–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É:</b> {callback.from_user.mention_html()}"
    
    # Update keyboard to remove assign button
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                callback_data=f"ticket_close:{ticket_id}"
            ),
            InlineKeyboardButton(
                text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"ticket_reply:{ticket_id}"
            )
        ]
    ])
    
    try:
        await callback.message.edit_text(updated_text, reply_markup=keyboard)
        await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É")
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞")

@router.callback_query(F.data.startswith("ticket_close:"))
async def ticket_close_callback(callback: CallbackQuery, **kwargs):
    """Handle ticket closing callback."""
    if not kwargs.get('is_moderator', False):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    ticket_id = int(callback.data.split(":")[1])
    
    # Close ticket in database
    import aiosqlite
    from config import DATABASE_PATH
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        # Get ticket info first
        async with db.execute("SELECT user_id FROM tickets WHERE id = ?", (ticket_id,)) as cursor:
            ticket_row = await cursor.fetchone()
        
        if not ticket_row:
            await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = ticket_row[0]
        
        # Close the ticket
        await db.execute("""
            UPDATE tickets SET status = 'closed', close_date = strftime('%s', 'now')
            WHERE id = ?
        """, (ticket_id,))
        await db.commit()
    
    # Update message
    current_text = callback.message.text or callback.message.caption
    updated_text = f"{current_text}\n\n‚ùå <b>–ó–∞–∫—Ä—ã—Ç:</b> {callback.from_user.mention_html()}"
    
    try:
        await callback.message.edit_text(updated_text, reply_markup=None)
        await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        
        # Notify user about closure
        try:
            await callback.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå <b>–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                     f"–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /ticket"
            )
        except Exception:
            pass  # Ignore if we can't send to user
            
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞")

@router.message(Command("reply"))
@moderator_required
async def reply_command(message: Message, **kwargs):
    """Handle /reply command to respond to a ticket."""
    args = message.text.split(maxsplit=2)[1:] if message.text else []
    
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/reply [–Ω–æ–º–µ—Ä_—Ç–∏–∫–µ—Ç–∞] [–æ—Ç–≤–µ—Ç]</code>\n"
            "üîç –ü—Ä–∏–º–µ—Ä: <code>/reply 123 –í–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω</code>"
        )
        return
    
    try:
        ticket_id = int(args[0])
        reply_text = args[1]
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞.")
        return
    
    # Get ticket info
    ticket = await Database.get_ticket(ticket_id)
    if not ticket:
        await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if ticket['status'] != 'open':
        await message.reply("‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        return
    
    # Send reply to user
    user_id = ticket['user_id']
    moderator = message.from_user
    
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üí¨ <b>–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n"
                 f"üëÆ <b>–û—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> {moderator.mention_html()}\n\n"
                 f"üìù <b>–û—Ç–≤–µ—Ç:</b>\n{reply_text}\n\n"
                 f"üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
        )
        
        await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")

@router.callback_query(F.data.startswith("ticket_reply:"))
async def ticket_reply_callback(callback: CallbackQuery, **kwargs):
    """Handle ticket reply button callback."""
    if not kwargs.get('is_moderator', False):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    ticket_id = int(callback.data.split(":")[1])
    
    await callback.answer(
        f"üí¨ –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/reply {ticket_id} [–≤–∞—à_–æ—Ç–≤–µ—Ç]",
        show_alert=True
    )