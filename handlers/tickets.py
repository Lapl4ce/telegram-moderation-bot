from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import logging

from database.models import User, Ticket
from database.database import Database
from config import Config
from utils.validators import sanitize_text, format_user_display_name

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("ticket"))
async def cmd_ticket(message: Message, user: User, db: Database):
    """Handle /ticket command - create support ticket"""
    
    # Check if command is used in private chat
    if message.chat.type != "private":
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ /ticket —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    # Check if user is blocked from creating tickets
    if user.is_blocked_tickets:
        await message.reply("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
        return
    
    # Get ticket message
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("""
üìã **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
`/ticket –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`

–ü—Ä–∏–º–µ—Ä:
`/ticket –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π`

–í–∞—à —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.
""", parse_mode="Markdown")
        return
    
    ticket_message = sanitize_text(args[1])
    if len(ticket_message) < 10:
        await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    # Create ticket in database
    ticket = Ticket(
        user_id=user.user_id,
        message=ticket_message
    )
    
    ticket_id = await db.create_ticket(ticket)
    
    # Send confirmation to user
    user_name = format_user_display_name(user.username, user.first_name, user.last_name)
    await message.reply(f"""
‚úÖ **–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω**

üÜî **ID —Ç–∏–∫–µ—Ç–∞:** #{ticket_id}
üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:** {ticket_message}

–í–∞—à —Ç–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.
""", parse_mode="Markdown")
    
    # Send ticket to admin group if configured
    if Config.TICKETS_GROUP_ID:
        try:
            admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"ticket_reply:{ticket_id}"),
                    InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"ticket_close:{ticket_id}")
                ],
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"ticket_block:{user.user_id}")
                ]
            ])
            
            admin_message = f"""
üé´ **–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}**

üë§ **–û—Ç:** {user_name} (ID: `{user.user_id}`)
üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:** {ticket_message}
üìÖ **–°–æ–∑–¥–∞–Ω:** {ticket.created_at or "—Å–µ–π—á–∞—Å"}
"""
            
            # Send to admin group
            from aiogram import Bot
            bot = message.bot
            sent_message = await bot.send_message(
                Config.TICKETS_GROUP_ID,
                admin_message,
                parse_mode="Markdown",
                reply_markup=admin_keyboard
            )
            
            # Update ticket with admin message ID
            await db.update_ticket(ticket_id, admin_message_id=sent_message.message_id)
            
        except Exception as e:
            logger.error(f"Failed to send ticket to admin group: {e}")

@router.callback_query(lambda c: c.data and c.data.startswith("ticket_reply:"))
async def handle_ticket_reply_callback(callback: CallbackQuery, user: User, db: Database):
    """Handle ticket reply button"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        
        await callback.message.reply(f"""
üìù **–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}**

–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/reply {ticket_id} –≤–∞—à –æ—Ç–≤–µ—Ç`

–ü—Ä–∏–º–µ—Ä:
`/reply {ticket_id} –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ`
""", parse_mode="Markdown")
        
        await callback.answer()
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞")

@router.callback_query(lambda c: c.data and c.data.startswith("ticket_close:"))
async def handle_ticket_close_callback(callback: CallbackQuery, user: User, db: Database):
    """Handle ticket close button"""
    try:
        ticket_id = int(callback.data.split(":")[1])
        
        # Update ticket status
        await db.update_ticket(ticket_id, status="closed")
        
        # Update the message
        original_text = callback.message.text
        updated_text = original_text + "\n\n‚ùå **–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç**"
        
        await callback.message.edit_text(
            updated_text,
            parse_mode="Markdown"
        )
        
        await callback.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞")
    except Exception as e:
        logger.error(f"Error closing ticket: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞")

@router.callback_query(lambda c: c.data and c.data.startswith("ticket_block:"))
async def handle_ticket_block_callback(callback: CallbackQuery, user: User, db: Database):
    """Handle ticket user block button"""
    # Only admins can block users
    from database.models import UserRight
    if user.rights not in [UserRight.ADMIN]:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        blocked_user_id = int(callback.data.split(":")[1])
        
        # Get the user and block them
        blocked_user = await db.get_or_create_user(blocked_user_id)
        blocked_user.is_blocked_tickets = True
        await db.update_user(blocked_user)
        
        # Update the message
        original_text = callback.message.text
        updated_text = original_text + f"\n\nüö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {format_user_display_name(user.username, user.first_name, user.last_name)}**"
        
        await callback.message.edit_text(
            updated_text,
            parse_mode="Markdown"
        )
        
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error blocking user from tickets: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("reply"))
async def cmd_reply(message: Message, user: User, db: Database):
    """Handle /reply command - reply to ticket"""
    
    # Only admins and moderators can reply to tickets
    from database.models import UserRight
    if user.rights not in [UserRight.ADMIN, UserRight.MODERATOR]:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã")
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("""
üìù **–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reply ID_—Ç–∏–∫–µ—Ç–∞ –≤–∞—à_–æ—Ç–≤–µ—Ç`

–ü—Ä–∏–º–µ—Ä:
`/reply 123 –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ`
""", parse_mode="Markdown")
        return
    
    try:
        ticket_id = int(args[1])
        reply_text = sanitize_text(args[2])
        
        # Get ticket
        ticket = await db.get_ticket(ticket_id)
        if not ticket:
            await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if ticket.status == "closed":
            await message.reply("‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
            return
        
        # Send reply to user
        admin_name = format_user_display_name(user.username, user.first_name, user.last_name)
        reply_message = f"""
üì¨ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}**

üë§ **–û—Ç:** {admin_name}
üìù **–û—Ç–≤–µ—Ç:** {reply_text}

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.
"""
        
        try:
            await message.bot.send_message(
                ticket.user_id,
                reply_message,
                parse_mode="Markdown"
            )
            
            # Update ticket status
            await db.update_ticket(ticket_id, status="answered")
            
            await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–∏–∫–µ—Ç #{ticket_id})")
            
        except Exception as e:
            logger.error(f"Failed to send reply to user: {e}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞")
    except Exception as e:
        logger.error(f"Error replying to ticket: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Ç–∏–∫–µ—Ç")