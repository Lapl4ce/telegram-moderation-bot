"""Custom roles management handlers."""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, update

from database.database import get_db
from database.models import User
from utils.permissions import check_admin_permissions
from utils.user_parser import parse_username

router = Router()


async def get_target_user_roles(message: Message, args: list):
    """Get target user for role commands."""
    if message.reply_to_message and message.reply_to_message.from_user:
        user = message.reply_to_message.from_user
        return user.id, user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not args:
        return None
    
    username = parse_username(args[0])
    
    async for session in get_db():
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        if user:
            return user.user_id, user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    return None


@router.message(Command("set_custom_role"))
async def set_custom_role_command(message: Message, user_role: str):
    """Handle /set_custom_role command to set custom role for user."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply(
            "üìù <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/set_custom_role @username —Ä–æ–ª—å</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/set_custom_role @user –í–µ–ª–∏–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫</code>"
        )
        return
    
    target_info = await get_target_user_roles(message, args[1:])
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    custom_role = args[2]
    
    # Validate role length
    if len(custom_role) > 50:
        await message.reply("‚ùå –†–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    async for session in get_db():
        try:
            # Update custom role
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(custom_role=custom_role)
            )
            await session.commit()
            
            await message.reply(
                f"‚úÖ <b>–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üé≠ <b>–†–æ–ª—å:</b> {custom_role}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏: {e}")


@router.message(Command("remove_custom_role"))
async def remove_custom_role_command(message: Message, user_role: str):
    """Handle /remove_custom_role command to remove custom role."""
    if not await check_admin_permissions(message, user_role):
        return
    
    args = message.text.split()[1:]
    if len(args) < 1:
        await message.reply(
            "üìù <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/remove_custom_role @username</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/remove_custom_role @user</code>"
        )
        return
    
    target_info = await get_target_user_roles(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    async for session in get_db():
        try:
            # Get current custom role
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            if not user.custom_role:
                await message.reply("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏.")
                return
            
            old_role = user.custom_role
            
            # Remove custom role
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(custom_role=None)
            )
            await session.commit()
            
            await message.reply(
                f"‚úÖ <b>–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞</b>\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {target_name}\n"
                f"üé≠ <b>–ë—ã–ª–∞ —Ä–æ–ª—å:</b> {old_role}"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")


@router.message(Command("list_custom_roles"))
async def list_custom_roles_command(message: Message, user_role: str):
    """Handle /list_custom_roles command to list users with custom roles."""
    if not await check_admin_permissions(message, user_role):
        return
    
    async for session in get_db():
        try:
            # Get users with custom roles
            result = await session.execute(
                select(User)
                .where(User.custom_role.isnot(None))
                .order_by(User.custom_role)
            )
            users = result.scalars().all()
            
            if not users:
                await message.reply("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            roles_text = "üé≠ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏:</b>\n\n"
            
            for user in users:
                display_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if user.username:
                    display_name = f"@{user.username}"
                
                roles_text += f"üë§ {display_name}\n"
                roles_text += f"üé≠ <i>{user.custom_role}</i>\n\n"
            
            await message.reply(roles_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π: {e}")


@router.message(Command("role_stats"))
async def role_stats_command(message: Message, user_role: str):
    """Handle /role_stats command to show role statistics."""
    if not await check_admin_permissions(message, user_role):
        return
    
    async for session in get_db():
        try:
            from sqlalchemy import func
            
            # Get system roles count
            result = await session.execute(
                select(User.role, func.count(User.user_id))
                .group_by(User.role)
            )
            system_roles = dict(result.fetchall())
            
            # Get custom roles count
            result = await session.execute(
                select(func.count(User.user_id))
                .where(User.custom_role.isnot(None))
            )
            custom_roles_count = result.scalar()
            
            # Get total users
            result = await session.execute(select(func.count(User.user_id)))
            total_users = result.scalar()
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π</b>\n\n"
                f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n\n"
                f"üé≠ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            )
            
            role_names = {
                "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏",
                "moderator": "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                "art_leader": "üé® –ê—Ä—Ç-–ª–∏–¥–µ—Ä—ã"
            }
            
            for role, count in system_roles.items():
                role_name = role_names.get(role, role)
                percentage = (count / total_users) * 100 if total_users > 0 else 0
                stats_text += f"‚Ä¢ {role_name}: {count} ({percentage:.1f}%)\n"
            
            stats_text += f"\nüåü <b>–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–∏:</b> {custom_roles_count}"
            
            await message.reply(stats_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª–µ–π: {e}")