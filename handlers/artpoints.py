"""Art points management handlers."""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, update

from database.database import get_db
from database.models import User
from utils.permissions import can_manage_art_points
from utils.user_parser import parse_username

router = Router()


async def get_target_user_art(message: Message, args: list):
    """Get target user for art commands."""
    if message.reply_to_message and message.reply_to_message.from_user:
        user = message.reply_to_message.from_user
        return user.id, user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not args:
        return None
    
    username = parse_username(args[0])
    
    async for session in get_db():
        result = await session.execute(
            select(User).where(User.username == username)
        )
        user = result.scalar_one_or_none()
        if user:
            return user.user_id, user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    return None


@router.message(Command("give_art_points"))
async def give_art_points_command(message: Message, user_role: str):
    """Handle /give_art_points command to give art points to user."""
    if not can_manage_art_points(user_role):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç-–æ—á–∫–∞–º–∏.")
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–í—ã–¥–∞—á–∞ –∞—Ä—Ç-–æ—á–∫–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/give_art_points @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/give_art_points @user 50</code>"
        )
        return
    
    target_info = await get_target_user_art(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    try:
        points_arg_index = 1 if not args[0].startswith('@') else 2
        points = int(args[points_arg_index] if len(args) > points_arg_index else args[1])
        if points <= 0:
            raise ValueError()
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç-–æ—á–∫–æ–≤.")
        return
    
    async for session in get_db():
        try:
            # Get current art points
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            old_points = user.art_points
            new_points = old_points + points
            
            # Update art points
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(art_points=new_points)
            )
            await session.commit()
            
            await message.reply(
                f"‚úÖ <b>–ê—Ä—Ç-–æ—á–∫–∏ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name}</b>\n"
                f"üé® <b>–ë—ã–ª–æ:</b> {old_points} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
                f"üé® <b>–°—Ç–∞–ª–æ:</b> {new_points} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> +{points} –∞—Ä—Ç-–æ—á–∫–æ–≤"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞—Ä—Ç-–æ—á–∫–æ–≤: {e}")


@router.message(Command("remove_art_points"))
async def remove_art_points_command(message: Message, user_role: str):
    """Handle /remove_art_points command to remove art points from user."""
    if not can_manage_art_points(user_role):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç-–æ—á–∫–∞–º–∏.")
        return
    
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.reply(
            "üìù <b>–°–Ω—è—Ç–∏–µ –∞—Ä—Ç-–æ—á–∫–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/remove_art_points @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
            "üìã <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/remove_art_points @user 25</code>"
        )
        return
    
    target_info = await get_target_user_art(message, args)
    if not target_info:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    target_user_id, target_name = target_info
    
    try:
        points_arg_index = 1 if not args[0].startswith('@') else 2
        points = int(args[points_arg_index] if len(args) > points_arg_index else args[1])
        if points <= 0:
            raise ValueError()
    except (ValueError, IndexError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç-–æ—á–∫–æ–≤.")
        return
    
    async for session in get_db():
        try:
            # Get current art points
            result = await session.execute(
                select(User).where(User.user_id == target_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            old_points = user.art_points
            new_points = max(0, old_points - points)
            
            # Update art points
            await session.execute(
                update(User)
                .where(User.user_id == target_user_id)
                .values(art_points=new_points)
            )
            await session.commit()
            
            removed_points = old_points - new_points
            
            await message.reply(
                f"‚úÖ <b>–ê—Ä—Ç-–æ—á–∫–∏ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name}</b>\n"
                f"üé® <b>–ë—ã–ª–æ:</b> {old_points} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
                f"üé® <b>–°—Ç–∞–ª–æ:</b> {new_points} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
                f"‚ûñ <b>–°–Ω—è—Ç–æ:</b> -{removed_points} –∞—Ä—Ç-–æ—á–∫–æ–≤"
            )
            
        except Exception as e:
            await session.rollback()
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞—Ä—Ç-–æ—á–∫–æ–≤: {e}")


@router.message(Command("art_top"))
async def art_top_command(message: Message):
    """Handle /art_top command to show art points leaderboard."""
    async for session in get_db():
        try:
            # Get top users by art points
            result = await session.execute(
                select(User)
                .where(User.art_points > 0)
                .order_by(User.art_points.desc())
                .limit(10)
            )
            users = result.scalars().all()
            
            if not users:
                await message.reply("üé® –í —Ä–µ–π—Ç–∏–Ω–≥–µ –∞—Ä—Ç-–æ—á–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            top_text = "üé® <b>–¢–æ–ø –ø–æ –∞—Ä—Ç-–æ—á–∫–∞–º</b>\n\n"
            
            for i, user in enumerate(users, 1):
                # Medal for top 3
                if i == 1:
                    medal = "ü•á"
                elif i == 2:
                    medal = "ü•à"
                elif i == 3:
                    medal = "ü•â"
                else:
                    medal = f"{i}."
                
                # User info
                display_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if user.username:
                    display_name = f"@{user.username}"
                
                top_text += f"{medal} <b>{display_name}</b> ‚Äî {user.art_points} üé®\n"
            
            await message.reply(top_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∞—Ä—Ç-–æ—á–∫–æ–≤: {e}")


@router.message(Command("my_art_points"))
async def my_art_points_command(message: Message):
    """Handle /my_art_points command to show user's art points."""
    user_id = message.from_user.id
    
    async for session in get_db():
        try:
            result = await session.execute(
                select(User).where(User.user_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            art_points_text = (
                f"üé® <b>–í–∞—à–∏ –∞—Ä—Ç-–æ—á–∫–∏</b>\n\n"
                f"üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {user.art_points} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
            )
            
            # Get rank among art users if user has points
            if user.art_points > 0:
                result = await session.execute(
                    select(User)
                    .where(User.art_points > user.art_points)
                )
                higher_users = len(result.scalars().all())
                
                result = await session.execute(
                    select(User).where(User.art_points > 0)
                )
                total_art_users = len(result.scalars().all())
                
                rank = higher_users + 1
                art_points_text += f"üèÜ <b>–í–∞—à–µ –º–µ—Å—Ç–æ:</b> {rank} –∏–∑ {total_art_users}"
            else:
                art_points_text += "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä—Ç-–æ—á–∫–æ–≤."
            
            await message.reply(art_points_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ç-–æ—á–∫–æ–≤: {e}")


@router.message(Command("art_stats"))
async def art_stats_command(message: Message, user_role: str):
    """Handle /art_stats command to show art points statistics."""
    if not can_manage_art_points(user_role):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ä—Ç-–æ—á–∫–æ–≤.")
        return
    
    async for session in get_db():
        try:
            from sqlalchemy import func
            
            # Get total art points distributed
            result = await session.execute(
                select(func.sum(User.art_points))
            )
            total_points = result.scalar() or 0
            
            # Get users with art points
            result = await session.execute(
                select(func.count(User.user_id))
                .where(User.art_points > 0)
            )
            users_with_points = result.scalar()
            
            # Get average art points
            result = await session.execute(
                select(func.avg(User.art_points))
                .where(User.art_points > 0)
            )
            avg_points = result.scalar() or 0
            
            # Get top art user
            result = await session.execute(
                select(User)
                .where(User.art_points > 0)
                .order_by(User.art_points.desc())
                .limit(1)
            )
            top_user = result.scalar_one_or_none()
            
            stats_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ç-–æ—á–∫–æ–≤</b>\n\n"
                f"üíé <b>–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ:</b> {total_points:,} –∞—Ä—Ç-–æ—á–∫–æ–≤\n"
                f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–∫–∞–º–∏:</b> {users_with_points}\n"
                f"üìà <b>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {avg_points:.1f} –æ—á–∫–æ–≤\n"
            )
            
            if top_user:
                display_name = top_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if top_user.username:
                    display_name = f"@{top_user.username}"
                
                stats_text += f"\nüèÜ <b>–õ–∏–¥–µ—Ä:</b> {display_name} ({top_user.art_points} –æ—á–∫–æ–≤)"
            
            await message.reply(stats_text)
            
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")